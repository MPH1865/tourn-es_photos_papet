#!/usr/bin/env node

import { execSync } from 'child_process';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Configuration de d√©ploiement
const deployConfig = {
  buildDir: 'dist',
  serverPort: 3131,
  serverHost: '0.0.0.0',
  smbApiPort: 3132
};

console.log('üöÄ D√©marrage du d√©ploiement...\n');

try {
  // √âtape 1: V√©rification des d√©pendances
  console.log('üì¶ V√©rification des d√©pendances...');
  if (!existsSync('node_modules')) {
    console.log('Installation des d√©pendances...');
    execSync('npm install', { stdio: 'inherit' });
  } else {
    console.log('‚úÖ D√©pendances d√©j√† install√©es');
  }

  // √âtape 2: Build de production
  console.log('\nüî® Construction de l\'application...');
  execSync('npm run build', { stdio: 'inherit' });
  console.log('‚úÖ Build termin√© avec succ√®s');

  // √âtape 3: Cr√©ation du serveur de production
  console.log('\nüåê Cr√©ation du serveur de production...');
  
  const serverScript = `
import express from 'express';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { serverConfig } from './server.config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const config = serverConfig.production;

// Configuration des headers de s√©curit√©
app.use((req, res, next) => {
  Object.entries(serverConfig.security.headers).forEach(([header, value]) => {
    res.setHeader(header, value);
  });
  next();
});

// Servir les fichiers statiques
app.use(express.static(join(__dirname, '${deployConfig.buildDir}')));

// Route pour toutes les autres requ√™tes (SPA)
app.get('*', (req, res) => {
  res.sendFile(join(__dirname, '${deployConfig.buildDir}', 'index.html'));
});

const port = process.env.PORT || ${deployConfig.serverPort};
const host = process.env.HOST || '${deployConfig.serverHost}';

app.listen(port, host, () => {
  console.log(\`üöÄ Serveur d√©marr√© sur http://\${host}:\${port}\`);
  console.log(\`üìÅ Serveur de fichiers: \${join(__dirname, '${deployConfig.buildDir}')}\`);
  console.log(\`üîí Mode s√©curis√© activ√©\`);
});
`;

  writeFileSync('server.js', serverScript.trim());
  console.log('‚úÖ Serveur de production cr√©√©');

  // √âtape 4: Installation des d√©pendances backend
  console.log('\nüì¶ Installation des d√©pendances backend...');
  const backendDeps = ['express', 'multer', 'cors'];
  
  for (const dep of backendDeps) {
    try {
      execSync(`npm list ${dep}`, { stdio: 'pipe' });
      console.log(`‚úÖ ${dep} d√©j√† install√©`);
    } catch {
      console.log(`Installation de ${dep}...`);
      execSync(`npm install ${dep}`, { stdio: 'inherit' });
      console.log(`‚úÖ ${dep} install√©`);
    }
  }

  // √âtape 4b: V√©rification des outils syst√®me SMB
  console.log('\nüîß V√©rification des outils SMB syst√®me...');
  try {
    execSync('which smbclient', { stdio: 'pipe' });
    console.log('‚úÖ smbclient disponible');
  } catch {
    console.log('‚ö†Ô∏è  smbclient non trouv√©. Installation recommand√©e:');
    console.log('   sudo apt-get install smbclient cifs-utils');
  }

  try {
    execSync('which mount.cifs', { stdio: 'pipe' });
    console.log('‚úÖ cifs-utils disponible');
  } catch {
    console.log('‚ö†Ô∏è  cifs-utils non trouv√©. Installation recommand√©e:');
    console.log('   sudo apt-get install cifs-utils');
  }

  // √âtape 5: Cr√©ation des dossiers n√©cessaires
  console.log('\nüìÅ Cr√©ation des dossiers...');
  const dirs = ['logs', 'temp'];
  dirs.forEach(dir => {
    if (!existsSync(dir)) {
      mkdirSync(dir, { recursive: true });
      console.log(`‚úÖ Dossier ${dir} cr√©√©`);
    } else {
      console.log(`‚úÖ Dossier ${dir} existe d√©j√†`);
    }
  });

  // √âtape 6: Cr√©ation du serveur SMB API
  console.log('\nüîå Cr√©ation du serveur SMB API...');
  
  if (!existsSync('server')) {
    mkdirSync('server');
  }

  const smbServerScript = `const express = require('express')
const multer = require('multer')
const cors = require('cors')
const fs = require('fs').promises
const path = require('path')
const { exec } = require('child_process')
const { promisify } = require('util')

const execAsync = promisify(exec)
const app = express()
const PORT = ${deployConfig.smbApiPort}

// Configuration CORS
app.use(cors({
  origin: ['http://192.168.12.200:${deployConfig.serverPort}', 'http://localhost:${deployConfig.serverPort}'],
  credentials: true
}))

app.use(express.json())

// Configuration multer pour l'upload de fichiers
const storage = multer.memoryStorage()
const upload = multer({ 
  storage: storage,
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB max par fichier
  }
})

// Fonction pour cr√©er un dossier SMB
const createSMBFolder = async (config, folderName) => {
  const { serverAddress, username, password, shareName, basePath } = config
  const fullPath = \`//\${serverAddress}/\${shareName}\${basePath}/\${folderName}\`
  
  try {
    // Cr√©er le point de montage temporaire
    const mountPoint = \`/tmp/smb_mount_\${Date.now()}\`
    await fs.mkdir(mountPoint, { recursive: true })
    
    // Monter le partage SMB
    const mountCmd = \`mount -t cifs //\${serverAddress}/\${shareName} \${mountPoint} -o username=\${username},password=\${password},vers=3.0\`
    await execAsync(mountCmd)
    
    // Cr√©er le dossier
    const targetDir = path.join(mountPoint, basePath, folderName)
    await fs.mkdir(targetDir, { recursive: true })
    
    // D√©monter
    await execAsync(\`umount \${mountPoint}\`)
    await fs.rmdir(mountPoint)
    
    return { success: true, path: fullPath }
  } catch (error) {
    console.error('Erreur cr√©ation dossier SMB:', error)
    return { success: false, error: error.message }
  }
}

// Fonction pour copier un fichier vers SMB
const copyFileToSMB = async (config, folderName, fileName, fileBuffer) => {
  const { serverAddress, username, password, shareName, basePath } = config
  
  try {
    // Cr√©er le point de montage temporaire
    const mountPoint = \`/tmp/smb_mount_\${Date.now()}\`
    await fs.mkdir(mountPoint, { recursive: true })
    
    // Monter le partage SMB
    const mountCmd = \`mount -t cifs //\${serverAddress}/\${shareName} \${mountPoint} -o username=\${username},password=\${password},vers=3.0\`
    await execAsync(mountCmd)
    
    // Cr√©er le dossier si n√©cessaire
    const targetDir = path.join(mountPoint, basePath, folderName)
    await fs.mkdir(targetDir, { recursive: true })
    
    // √âcrire le fichier
    const filePath = path.join(targetDir, fileName)
    await fs.writeFile(filePath, fileBuffer)
    
    // D√©monter
    await execAsync(\`umount \${mountPoint}\`)
    await fs.rmdir(mountPoint)
    
    return { success: true, path: \`//\${serverAddress}/\${shareName}\${basePath}/\${folderName}/\${fileName}\` }
  } catch (error) {
    console.error('Erreur copie fichier SMB:', error)
    return { success: false, error: error.message }
  }
}

// Test de connexion SMB
app.post('/api/smb/test-connection', async (req, res) => {
  try {
    const { serverAddress, username, password, shareName } = req.body
    
    if (!serverAddress || !username || !password || !shareName) {
      return res.status(400).json({
        success: false,
        message: 'Configuration incompl√®te'
      })
    }
    
    // Test de connexion avec smbclient
    const testCmd = \`smbclient //\${serverAddress}/\${shareName} -U \${username}%\${password} -c "ls" 2>/dev/null\`
    
    try {
      await execAsync(testCmd)
      res.json({
        success: true,
        message: \`Connexion r√©ussie au serveur \${serverAddress}\`
      })
    } catch (error) {
      res.json({
        success: false,
        message: 'Impossible de se connecter au serveur. V√©rifiez vos param√®tres.'
      })
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Erreur lors du test de connexion'
    })
  }
})

// Upload de photos vers SMB
app.post('/api/smb/upload', upload.array('files'), async (req, res) => {
  try {
    const { config, folderName } = req.body
    const files = req.files
    
    if (!files || files.length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Aucun fichier fourni'
      })
    }
    
    const parsedConfig = JSON.parse(config)
    const uploadedPaths = []
    
    // Cr√©er le dossier de destination
    const folderResult = await createSMBFolder(parsedConfig, folderName)
    if (!folderResult.success) {
      return res.status(500).json({
        success: false,
        message: \`Erreur cr√©ation dossier: \${folderResult.error}\`
      })
    }
    
    // Uploader chaque fichier
    for (const file of files) {
      const timestamp = Date.now()
      const fileName = \`\${timestamp}_\${file.originalname}\`
      
      const result = await copyFileToSMB(parsedConfig, folderName, fileName, file.buffer)
      
      if (result.success) {
        uploadedPaths.push(result.path)
      } else {
        console.error(\`Erreur upload \${file.originalname}:\`, result.error)
      }
    }
    
    if (uploadedPaths.length > 0) {
      res.json({
        success: true,
        message: \`\${uploadedPaths.length} fichier(s) upload√©(s) avec succ√®s\`,
        paths: uploadedPaths,
        folderPath: folderResult.path
      })
    } else {
      res.status(500).json({
        success: false,
        message: 'Aucun fichier n\\'a pu √™tre upload√©'
      })
    }
  } catch (error) {
    console.error('Erreur upload:', error)
    res.status(500).json({
      success: false,
      message: 'Erreur lors de l\\'upload des fichiers'
    })
  }
})

app.listen(PORT, '192.168.12.200', () => {
  console.log(\`Serveur SMB API d√©marr√© sur http://192.168.12.200:\${PORT}\`)
})`;

  writeFileSync('server/smbServer.js', smbServerScript);
  console.log('‚úÖ Serveur SMB API cr√©√©');

  // √âtape 7: Cr√©ation des scripts de d√©marrage
  const startScript = `#!/bin/bash
echo "üöÄ D√©marrage de l'application Photo Uploader SMB..."
echo "üìç Port Frontend: ${deployConfig.serverPort}"
echo "üìç Port API SMB: ${deployConfig.smbApiPort}"
echo "üåê Host: ${deployConfig.serverHost}"
echo ""

# D√©marrer le serveur SMB API en arri√®re-plan
echo "D√©marrage du serveur SMB API..."
node server/smbServer.js &
SMB_PID=$!

# D√©marrer le serveur frontend
echo "D√©marrage du serveur frontend..."
node server.js &
FRONTEND_PID=$!

# Fonction de nettoyage
cleanup() {
    echo "Arr√™t des serveurs..."
    kill $SMB_PID $FRONTEND_PID 2>/dev/null
    exit 0
}

# Capturer les signaux d'arr√™t
trap cleanup SIGINT SIGTERM

# Attendre
wait
`;

  const startSmbOnlyScript = `#!/bin/bash
echo "üîå D√©marrage du serveur SMB API uniquement..."
echo "üìç Port: ${deployConfig.smbApiPort}"
echo ""
node server/smbServer.js
`;

  writeFileSync('start.sh', startScript);
  writeFileSync('start-smb.sh', startSmbOnlyScript);
  execSync('chmod +x start.sh start-smb.sh');
  console.log('‚úÖ Scripts de d√©marrage cr√©√©s');

  // √âtape 8: Informations finales
  console.log('\nüéâ D√©ploiement termin√© avec succ√®s!');
  console.log('\nüìã Instructions pour d√©marrer les serveurs:');
  console.log('   1. Complet: ./start.sh (frontend + API SMB)');
  console.log('   2. API SMB seulement: ./start-smb.sh');
  console.log('   3. Frontend seulement: node server.js');
  console.log('   4. Via npm: npm run serve (frontend) ou npm run start-smb-server (API)');
  
  console.log(`\nüåê L'application sera accessible sur:`);
  console.log(`   - Frontend: http://192.168.12.200:${deployConfig.serverPort}`);
  console.log(`   - API SMB: http://192.168.12.200:${deployConfig.smbApiPort}`);
  
  console.log(`\nüìÅ Fichiers g√©n√©r√©s:`);
  console.log('   - server.js (serveur frontend de production)');
  console.log('   - server/smbServer.js (serveur API SMB)');
  console.log('   - start.sh (d√©marrage complet)');
  console.log('   - start-smb.sh (API SMB uniquement)');
  console.log('   - dist/ (fichiers de production)');
  
  console.log(`\n‚ö†Ô∏è  Pr√©requis syst√®me pour SMB:`);
  console.log('   - smbclient: sudo apt-get install smbclient');
  console.log('   - cifs-utils: sudo apt-get install cifs-utils');
  console.log('   - Permissions sudo pour mount/umount');

} catch (error) {
  console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
  process.exit(1);
}
