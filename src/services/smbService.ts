interface UploadResult {
  success: boolean
  paths: string[]
  folderPath: string
}

interface ProgressCallback {
  (progress: number): void
}

// Fonction pour g√©n√©rer le nom de dossier selon le format configur√©
export const generateFolderName = (): string => {
  const format = localStorage.getItem('smb_folder_format') || 'YYYY-MM-DD_HHhMM'
  const now = new Date()
  
  const year = now.getFullYear()
  const month = String(now.getMonth() + 1).padStart(2, '0')
  const day = String(now.getDate()).padStart(2, '0')
  const hours = String(now.getHours()).padStart(2, '0')
  const minutes = String(now.getMinutes()).padStart(2, '0')
  
  return format
    .replace('YYYY', String(year))
    .replace('MM', month)
    .replace('DD', day)
    .replace('HH', hours)
    .replace('hMM', `h${minutes}`)
    .replace('-MM', `-${minutes}`)
}

export const uploadPhotosToSMB = async (
  files: File[],
  folderName: string,
  onProgress?: ProgressCallback
): Promise<UploadResult> => {
  // R√©cup√©ration des param√®tres de configuration
  const serverAddress = localStorage.getItem('smb_server') || 'localhost'
  const username = localStorage.getItem('smb_username') || ''
  const password = localStorage.getItem('smb_password') || ''
  const shareName = localStorage.getItem('smb_share') || 'photos'
  const basePath = localStorage.getItem('smb_basepath') || '/uploads'
  const folderNameFormat = localStorage.getItem('smb_folder_format') || 'YYYY-MM-DD_HHhMM'
  
  console.log('üöÄ D√©but upload vers SMB:', {
    serverAddress,
    username,
    shareName,
    basePath,
    folderName,
    filesCount: files.length
  })
  
  try {
    const API_BASE_URL = 'http://192.168.12.200:3132'
    
    const config = {
      serverAddress,
      username,
      password,
      shareName,
      basePath,
      folderNameFormat
    }
    
    console.log('üì° Envoi vers API SMB:', API_BASE_URL)
    
    const formData = new FormData()
    
    // Ajouter les fichiers
    files.forEach((file, index) => {
      formData.append(`files`, file)
      console.log(`üìé Fichier ${index + 1}: ${file.name} (${file.size} bytes)`)
    })
    
    // Ajouter la configuration
    formData.append('config', JSON.stringify(config))
    formData.append('folderName', folderName)
    
    console.log('‚è≥ Envoi de la requ√™te...')
    
    const response = await fetch(`${API_BASE_URL}/api/smb/upload`, {
      method: 'POST',
      body: formData,
    })
    
    console.log('üì• R√©ponse re√ßue:', response.status, response.statusText)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erreur HTTP:', errorText)
      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`)
    }
    
    const result = await response.json()
    console.log('‚úÖ R√©sultat API:', result)
    
    if (result.success) {
      return {
        success: true,
        paths: result.paths || [],
        folderPath: result.folderPath || `\\\\${serverAddress}\\${shareName}${basePath}\\${folderName}`
      }
    } else {
      throw new Error(result.message)
    }
  } catch (error) {
    console.error('üí• Erreur upload:', error)
    throw new Error(error instanceof Error ? error.message : 'Erreur lors de l\'upload')
  }
}

// Fonction pour cr√©er le dossier SMB (√† impl√©menter c√¥t√© backend)
export const createSMBFolder = async (folderName: string): Promise<boolean> => {
  const serverAddress = localStorage.getItem('smb_server') || 'localhost'
  const shareName = localStorage.getItem('smb_share') || 'photos'
  const basePath = localStorage.getItem('smb_basepath') || '/uploads'
  
  console.log(`Simulation: Cr√©ation du dossier ${folderName} sur \\\\${serverAddress}\\${shareName}${basePath}`)
  return true
}

// Fonction pour v√©rifier la connexion SMB
export const checkSMBConnection = async (): Promise<{ success: boolean; message: string }> => {
  const serverAddress = localStorage.getItem('smb_server')
  const username = localStorage.getItem('smb_username')
  const password = localStorage.getItem('smb_password')
  const shareName = localStorage.getItem('smb_share')
  const basePath = localStorage.getItem('smb_basepath') || '/uploads'
  const folderNameFormat = localStorage.getItem('smb_folder_format') || 'YYYY-MM-DD_HHhMM'
  
  console.log('üîç Test de connexion SMB:', {
    serverAddress,
    username: username ? '***' : 'vide',
    password: password ? '***' : 'vide',
    shareName,
    basePath,
    folderNameFormat
  })
  
  if (!serverAddress || !username || !password || !shareName) {
    console.warn('‚ö†Ô∏è Configuration incompl√®te')
    return {
      success: false,
      message: 'Configuration incompl√®te. Veuillez remplir tous les champs obligatoires.'
    }
  }
  
  try {
    const API_BASE_URL = 'http://192.168.12.200:3132'
    
    const config = {
      serverAddress,
      username,
      password,
      shareName,
      basePath,
      folderNameFormat
    }
    
    console.log('üì° Test via API SMB:', API_BASE_URL)
    
    const response = await fetch(`${API_BASE_URL}/api/smb/test-connection`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(config),
    })
    
    console.log('üì• R√©ponse test connexion:', response.status, response.statusText)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erreur HTTP test:', errorText)
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const result = await response.json()
    console.log('‚úÖ R√©sultat test:', result)
    
    return result
  } catch (error) {
    console.error('üí• Erreur test connexion:', error)
    return {
      success: false,
      message: `Erreur de connexion √† l'API: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    }
  }
}

// Fonction pour envoyer les photos vers le serveur SMB
export const sendPhotosToSMB = async (
  photos: { file: File; path?: string }[],
  onProgress?: ProgressCallback
): Promise<{ success: boolean; message: string }> => {
  console.log('üì§ Envoi des photos vers SMB:', photos.length, 'photos')
  
  try {
    const totalPhotos = photos.length
    
    for (let i = 0; i < totalPhotos; i++) {
      console.log(`üì∏ Traitement photo ${i + 1}/${totalPhotos}:`, photos[i].file.name)
      
      // Progression de l'envoi
      const progress = Math.round(((i + 1) / totalPhotos) * 100)
      onProgress?.(progress)
      
      // Simulation du temps d'envoi (√† remplacer par l'envoi r√©el si n√©cessaire)
      await new Promise(resolve => setTimeout(resolve, 500))
    }
    
    console.log('‚úÖ Envoi termin√© avec succ√®s')
    
    return {
      success: true,
      message: `${totalPhotos} photo${totalPhotos > 1 ? 's' : ''} envoy√©e${totalPhotos > 1 ? 's' : ''} avec succ√®s`
    }
  } catch (error) {
    console.error('üí• Erreur envoi photos:', error)
    return {
      success: false,
      message: 'Erreur lors de l\'envoi des photos'
    }
  }
}
